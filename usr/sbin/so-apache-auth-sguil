#!/usr/bin/php
#
# Copyright 2014,2015,2016,2017,2018,2019,2020,2021 Security Onion Solutions, LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

<?php

function failAuth() {
	sleep (3);
	exit (1);
}

// Read from stdin. First line is the username, second line is the password.
// The trim default is to strip space characters, which would break auth if a
// password ends in a space.
// So we trim tab, LF, CR, NUL-byte, and vertical tab.
$handle = fopen ("php://stdin","r");
$username = trim(fgets($handle), "\t\n\r\0\x0B");
$password = trim(fgets($handle), "\t\n\r\0\x0B");

// Input validation - if username contains any non-alphanumeric characters, fail immediately
if (!(ctype_alnum($username))) {
	failAuth();
}

// Try to connect to database
$dbHost = "127.0.0.1";
$dbName = "securityonion_db";
$dbUser = "readonly";
$dbPass = "securityonion";
// PDO prepared statements
try {
    // first connect to database with the PDO object. 
    $dbpdo = new PDO("mysql:host=$dbHost;dbname=$dbName;charset=latin1", "$dbUser", "$dbPass", [
    PDO::ATTR_EMULATE_PREPARES => false,
    PDO::MYSQL_ATTR_USE_BUFFERED_QUERY => false,
    PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION
    ]);
} catch(PDOException $e){
    // if connection fails, log PDO error. 
    error_log("Error connecting to mysql: ". $e->getMessage());
}

// If database is down, fail immediately
if (! isset($dbpdo)) {
	failAuth();
} else {
        // prepare statement
        $statement = "SELECT * FROM user_info WHERE username = :user";
        $query = $dbpdo->prepare("$statement");
        // build parameters for prepared statement
        $params = [":user" => "$username"];
        // execute the prepared statement and pass it params
        $query->execute($params);
        // fetch the data
        while ($row = $query->fetch(PDO::FETCH_NUM)) {
                $userName       = $row[1];
                $userHash       = $row[3];
        }

	// If username is not in database, fail immediately
        if ( ! isset($userName) ) {
		failAuth();
	} else {
		// Username is in database, so check password hash
		// The first 2 chars are the salt     
		$theSalt = substr($userHash, 0,2);
		// The remainder is the hash
		$theHash = substr($userHash, 2);
		// Now we hash the users input                 
		$testHash = sha1($password . $theSalt);
		// Does it match? If yes, allow the user to continue to Kibana.
		if ($testHash === $theHash) {
			exit (0);
		} else {
			failAuth();
		}
	} 
}
?>
