#!/bin/bash
#
# Copyright 2014,2015,2016,2017,2018,2019 Security Onion Solutions, LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. /usr/sbin/so-elastic-common

. /etc/nsm/securityonion.conf

if [ "$KIBANA_ENABLED" = "yes" ]; then
        if docker ps | grep -q so-kibana; then
                echo -n "so-kibana: "
                echo "Already started!"
        else
		docker rm so-kibana >/dev/null 2>&1
                source /etc/nsm/securityonion.conf
                # Wait for ElasticSearch to come up, so that we can query for version information
                echo -n "Waiting for ElasticSearch..."
                COUNT=0
                ELASTICSEARCH_CONNECTED="no"
                while [[ "$COUNT" -le 240 ]]; do
                        curl ${ELASTICSEARCH_AUTH} --output /dev/null --silent --head --fail http://"$ELASTICSEARCH_HOST":"$ELASTICSEARCH_PORT"
                        if [ $? -eq 0 ]; then
                                ELASTICSEARCH_CONNECTED="yes"
                                echo "connected!"
                                break
                        else
                                ((COUNT+=1))
                                sleep 1
                                echo -n "."
                        fi
                done
                if [ "$ELASTICSEARCH_CONNECTED" == "no" ]; then
                        echo
                        echo -e "Connection attempt timed out.  Unable to connect to ElasticSearch.  \nPlease try: \n  -checking log(s) in /var/log/elasticsearch/\n  -running 'sudo docker ps' \n  -running 'sudo so-elastic-restart'" 
                        echo
                fi

		# If this is an existing installation, we need to wait for .kibana to go green (timing out after 240s)
		if [ "$KIBANA_VERSION" != "UNKNOWN" ]; then
			curl ${ELASTICSEARCH_AUTH} --output /dev/null --silent http://"$ELASTICSEARCH_HOST":"$ELASTICSEARCH_PORT"/_cluster/health/.kibana?wait_for_status=green'&'timeout=240s
		fi

                echo -n "so-kibana: "
                if docker ps | grep -q so-kibana; then
                        echo "Already started!"
                else

			if [ -f $ELASTICSEARCH_ACCOUNTS ]; then
				CONFIG="/etc/kibana/kibana.yml"
				KIBANA_PASSWORD=$(grep "PASSWORD kibana = " $ELASTICSEARCH_ACCOUNTS | awk '{print $4}')
				chown kibana:kibana $CONFIG
				chmod 640 $CONFIG
				sed -i "s|^#elasticsearch.username:.*$|elasticsearch.username: kibana|g" $CONFIG
				sed -i "s|^#elasticsearch.password:.*$|elasticsearch.password: $KIBANA_PASSWORD|g" $CONFIG
			fi

			# Publish ports to localhost 127.0.0.1 ONLY
                        docker run --name=so-kibana \
                                --detach \
                                --env "KIBANA_DEFAULTAPPID=$KIBANA_DEFAULTAPPID" \
                                --publish 127.0.0.1:5601:5601 \
                                --volume /etc/kibana/:/usr/share/kibana/config/:ro \
                                --volume /var/log/kibana:/var/log/kibana \
                                $KIBANA_OPTIONS \
                                $DOCKERHUB/so-kibana

			# Kibana will connect to elasticsearch over $DOCKERNET
			docker network connect --alias kibana $DOCKERNET so-kibana

                        # Compare current version of ES with previously stored version.
                        CURRENT_KIBANA_VERSION=$(curl ${ELASTICSEARCH_AUTH} -s "http://$ELASTICSEARCH_HOST:$ELASTICSEARCH_PORT" | jq .version.number | sed 's/"//g')
                        if [ "$CURRENT_KIBANA_VERSION" != "$KIBANA_VERSION" ]; then
				echo "Configuring Kibana, please wait..."
                                /usr/sbin/so-elastic-configure-kibana > /dev/null 2>&1
                        fi
                fi
        fi
fi

