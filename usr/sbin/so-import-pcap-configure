#!/bin/bash
#
# Copyright 2014,2015,2016,2017,2018,2019,2020 Security Onion Solutions, LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

COMMON="/usr/sbin/so-common"
if ! [ -f $COMMON ]; then
	echo "$COMMON not found."
	echo "This script requires Security Onion 16.04 or later."
	exit
fi
source $COMMON

HOST_ORIG=`hostname`
HOSTNAME=${HOST_ORIG,,}
SENSORNAME="$HOSTNAME-import"
SENSOR="$HOSTNAME-import"
SENSORCONF="/etc/nsm/$SENSORNAME/sensor.conf"

# check to see if this is a sensor before continuing
if [ -f /root/.ssh/securityonion_ssh.conf ]; then
	echo "This machine appears to be a sensor connected to a distributed deployment."
	echo "This script was designed for standalone systems designated for so-import-pcap."
	exit
fi

# display warnings every time
cat << EOF

so-import-pcap

This script will import one or more pcaps into Security Onion and preserve original timestamps.

It will do the following:
- automatically run Setup to configure the system if necessary
- stop and disable Curator to avoid closing old indices
- stop and disable all active sniffing processes (Zeek, Snort, Suricata, and netsniff-ng)
- stop and disable ossec_agent
- reconfigure and restart sguild where necessary
- generate IDS alerts using Snort or Suricata
- generate Zeek logs
- store IDS alerts and Zeek logs with original timestamps
- split traffic into separate daily pcaps and store them where sguil's pcap_agent can find them

Requirements:
- You must be running at least Security Onion 16.04.

Warnings:
- Do NOT run this on a production deployment. It is designed for standalone systems designated for so-import-pcap.
- If you're running in a VM with snapshot capability, you might want to take a snapshot before this program makes changes.

Reverting System Changes:
- If you take a VM snapshot before this program makes changes, then just revert to snapshot.
- Otherwise, you can re-run Setup and it should overwrite all modified files to revert the system to normal operation.

If this is the first time so-import-pcap has been run on this system, then it will make changes to the system.

Press Enter to continue or Ctrl-c to cancel.
EOF
read input

# check to see if another instance of so-import-pcap is already running
LOCK="/var/lock/so-import-pcap-configure"
if [ -f $LOCK ] ; then
	echo "Lock file $LOCK found!"
	echo "It looks like another instance of so-import-pcap is making changes to the system."
	echo "Please wait for the other instance to complete before running again."
	exit
fi

# create lock file before making changes
touch $LOCK

# if Setup hasn't been run yet, run it now
if ! [ -f /etc/sguild/sguild.conf ]; then
	echo "It looks like you haven't run Setup yet, so let's do that now."
	echo "We need to create a username and password that you will use to log into Sguil, Squert, and Kibana."

	until [ "$USERNAME_CONFIRMED" = "yes" ]; do
		echo "What would you like your username to be? (alphanumeric characters only)"
		read USERNAME
		COMPRESSED="$(echo $USERNAME | sed -e 's/[^[:alnum:]]//g')"
                if [ "$COMPRESSED" != "$USERNAME" ] || [ x$USERNAME = "x" ] ; then
                        echo "Invalid username!"
		else
			USERNAME_CONFIRMED="yes"
		fi
	done

	until [ "$PASSWORD_CONFIRMED" = "yes" ]; do
		echo "What would you like your password to be?"
		read -s PASSWORD_1
		echo
		echo "Please confirm your password."
		read -s PASSWORD_2
		echo
		if [ "$PASSWORD_1" = "$PASSWORD_2" ]; then
			PASSWORD_CONFIRMED="yes"
		else
			echo "Passwords didn't match!"
		fi
	done

	echo "# Added by /usr/sbin/so-import-pcap for Security Onion" >> /etc/network/interfaces

	SOSETUP_CONF=`mktemp /tmp/sosetup-import-XXXXXXXXXX.conf`
	cp /usr/share/securityonion/sosetup-master.conf $SOSETUP_CONF
	sed -i "s|onionuser|$USERNAME|g" 					$SOSETUP_CONF
	sed -i "s|asdfasdf|$PASSWORD_1|g" 					$SOSETUP_CONF
	sed -i "s|LOGSTASH_OUTPUT_REDIS='yes'|LOGSTASH_OUTPUT_REDIS='no'|g" 	$SOSETUP_CONF
	sed -i "s|OSSEC_AGENT_ENABLED='yes'|OSSEC_AGENT_ENABLED='no'|g" 	$SOSETUP_CONF
	sed -i "s|SALT='yes'|SALT='no'|g" 					$SOSETUP_CONF
	sed -i "s|IDS_ENGINE='snort'|IDS_ENGINE='suricata'|g"			$SOSETUP_CONF
	echo yes | /usr/sbin/sosetup -f $SOSETUP_CONF
	shred -u $SOSETUP_CONF

fi

echo "Please wait while:"

# check for pcapfix and install if necessary
if ! dpkg -l |grep pcapfix >/dev/null; then
	echo "- installing pcapfix."
	apt-get install pcapfix >/dev/null
	if ! dpkg -l |grep pcapfix >/dev/null; then
		echo "Error! Unable to install pcapfix.  Please install manually."
		exit
	fi
fi

# create Sguil import sensor
# based on the sensor creation code in /usr/sbin/sosetup
# If the user had already run Setup, let's re-use their first enabled interface in /etc/nsm/sensortab.
# Otherwise, pick the first available interface.
if [ $(grep -v "^#" /etc/nsm/sensortab | wc -l) -gt 0 ]; then
	INTERFACE=$(grep -v "^#" /etc/nsm/sensortab | head -1 | awk '{print $4}')
else
	INTERFACE=`awk '/:/ {print $1}' /proc/net/dev | tr -d ':' | grep -v "^lo$" | grep -v "^docker" | grep -v "^br-" | grep -v "^veth" | sort | head -1`
fi
if ! [ -d /etc/nsm/$SENSORNAME ]; then
	echo "- creating Sguil sensor named $SENSORNAME."
	BY2PORT=7900

        # Add the sensor
        /usr/sbin/nsm_sensor_add --sensor-name="$SENSORNAME" --sensor-interface="$INTERFACE" --sensor-interface-auto=no \
                                        --sensor-server-host="$SERVERNAME" --sensor-server-port=7736 \
                                        --sensor-barnyard2-port=$BY2PORT --sensor-auto=yes --sensor-utc=yes \
                                        --sensor-vlan-tagging=no --sensor-net-group="$SENSORNAME" --force-yes >/dev/null 2>&1

        # Copy our customized snort.conf (and associated files) into place
        cp /etc/nsm/templates/snort/attribute_table.dtd /etc/nsm/"$SENSORNAME"/
        cp /etc/nsm/templates/snort/snort.conf /etc/nsm/"$SENSORNAME"/
        cp /etc/nsm/templates/snort/unicode.map /etc/nsm/"$SENSORNAME"/
        cp /etc/nsm/templates/suricata/suricata.yaml.in /etc/nsm/"$SENSORNAME"/suricata.yaml

        # Write IDS config to files
	HOME_NET="192.168.0.0/16,10.0.0.0/8,172.16.0.0/12"
        sed -i "s|classification-file: /etc/suricata/classification.config|classification-file: /etc/nsm/$SENSORNAME/classification.config|g" /etc/nsm/"$SENSORNAME"/suricata.yaml
        sed -i "s|reference-config-file: /etc/suricata/reference.config|reference-config-file: /etc/nsm/$SENSORNAME/reference.config|g" /etc/nsm/"$SENSORNAME"/suricata.yaml
        sed -i "s|# threshold-file: /etc/suricata/threshold.config|threshold-file: /etc/nsm/$SENSORNAME/threshold.conf|g" /etc/nsm/"$SENSORNAME"/suricata.yaml
        sed -i "s|filename: unified2.alert|filename: snort.unified2|g" /etc/nsm/"$SENSORNAME"/suricata.yaml
        sed -i "s|interface: eth0|interface: $INTERFACE|g" /etc/nsm/"$SENSORNAME"/suricata.yaml
        sed -i "s|cluster-id: 99|cluster-id: $BY2PORT|g" /etc/nsm/"$SENSORNAME"/suricata.yaml
        sed -i "s|    HOME_NET:.*|    HOME_NET: \"[$HOME_NET]\"|g" /etc/nsm/"$SENSORNAME"/suricata.yaml
        mkdir -p /usr/local/lib/snort_dynamicrules

        # /etc/nsm/rules/
        if [ ! -f /etc/nsm/rules/bpf.conf ]; then touch /etc/nsm/rules/bpf.conf; fi
        if [ ! -f /etc/nsm/rules/threshold.conf ]; then cp /etc/nsm/templates/snort/threshold.conf /etc/nsm/rules/; fi
        if [ ! -f /etc/nsm/rules/gen-msg.map ]; then cp /etc/nsm/templates/snort/gen-msg.map /etc/nsm/rules/; fi
        if [ ! -f /etc/nsm/rules/classification.config ]; then
                grep -h -v "^#" /etc/nsm/templates/snort/classification.config /etc/nsm/templates/suricata/classification.config |sort -u > /etc/nsm/rules/classification.config
        fi
        if [ ! -f /etc/nsm/rules/reference.config ]; then
                grep -h -v "^#" /etc/nsm/templates/snort/reference.config /etc/nsm/templates/suricata/reference.config |sort -u > /etc/nsm/rules/reference.config
        fi

        # Create symbolic links for bpf.conf, threshold.conf, sid-msg.map, gen-msg.map, classification.config, and reference.config
        for FILENAME in bpf.conf threshold.conf sid-msg.map gen-msg.map classification.config reference.config
        do
                rm -f /etc/nsm/"$SENSORNAME"/$FILENAME
                ln -s /etc/nsm/rules/$FILENAME /etc/nsm/"$SENSORNAME"/$FILENAME
        done

	# Allow sguild to find rules for Snort or Suricata
	ln -s /etc/nsm/rules /nsm/server_data/securityonion/rules/"$SENSORNAME"
	ln -s /etc/nsm/rules /nsm/server_data/securityonion/rules/"$SENSORNAME"-1

	# disable barnyard snorby output
	if grep "^output database: alert, mysql, user=root dbname=snorby host=127.0.0.1" /etc/nsm/$SENSORNAME/barnyard*.conf >/dev/null 2>&1; then
		echo "- disabling snorby output in barnyard config."
		sed -i 's|^output database: alert, mysql, user=root dbname=snorby host=127.0.0.1|#output database: alert, mysql, user=root dbname=snorby host=127.0.0.1|g' /etc/nsm/$SENSORNAME/barnyard*.conf
	fi

	# disable barnyard syslog output
	if grep "^output alert_syslog: LOG_LOCAL6 LOG_ALERT$" /etc/nsm/$SENSORNAME/barnyard*.conf >/dev/null 2>&1; then
		echo "- disabling syslog output in barnyard config."
		sed -i 's|^output alert_syslog: LOG_LOCAL6 LOG_ALERT$|#output alert_syslog: LOG_LOCAL6 LOG_ALERT|g' /etc/nsm/$SENSORNAME/barnyard*.conf
	fi

	echo "- stopping sensor services."
	/usr/sbin/so-sensor-stop >/dev/null 2>&1

	echo "- backing up /etc/nsm/sensortab to /etc/nsm/sensortab.orig"
	cp /etc/nsm/sensortab /etc/nsm/sensortab.orig

	echo "- enabling $SENSORNAME in /etc/nsm/sensortab"
	grep "$SENSORNAME" /etc/nsm/sensortab.orig > /etc/nsm/sensortab

	# disable unnecessary services
	sed -i 's|PRADS_ENABLED="yes"|PRADS_ENABLED="no"|g' 		$SENSORCONF
	sed -i 's|PCAP_ENABLED="yes"|PCAP_ENABLED="no"|g' 		$SENSORCONF
	sed -i 's|PADS_AGENT_ENABLED="yes"|PADS_AGENT_ENABLED="no"|g'	$SENSORCONF
	sed -i 's|SANCP_AGENT_ENABLED="yes"|SANCP_AGENT_ENABLED="no"|g' $SENSORCONF
	sed -i 's|HTTP_AGENT_ENABLED="yes"|HTTP_AGENT_ENABLED="no"|g' 	$SENSORCONF
	sed -i 's|ARGUS_ENABLED="yes"|ARGUS_ENABLED="no"|g' 		$SENSORCONF
	sed -i 's|IDS_ENGINE_ENABLED="yes"|IDS_ENGINE_ENABLED="no"|g' 	$SENSORCONF

	# start all sensor services
	echo "- starting sensor services."
	/usr/sbin/so-sensor-start >/dev/null 2>&1

fi

# create /opt/bro/etc/node.cfg so that pivoting from Kibana to CapMe will work
NODE_CFG="/opt/bro/etc/node.cfg"
if ! [ -f $NODE_CFG ]; then
cat << EOF > $NODE_CFG
[bro]
type=standalone
host=localhost
interface=$INTERFACE
EOF
fi

# so-import-pcap: enable file-extraction #1715
# https://github.com/Security-Onion-Solutions/security-onion/issues/1715
sed -i 's|^#@load file-extraction|@load file-extraction|g' /opt/zeek/share/zeek/site/local.zeek

# make sure sguild is running with DEBUG 2
SGUILDCONF="/etc/sguild/sguild.conf"
if ! grep "set DEBUG 2" $SGUILDCONF >/dev/null 2>&1; then
	echo "- setting sguild debug to 2 and restarting sguild."
	sed -i 's|set DEBUG.*$|set DEBUG 2|g' $SGUILDCONF
	so-sguild-restart >/dev/null 2>&1
fi

CONF="/etc/nsm/securityonion.conf"
source $CONF

# stop curator if running
if docker ps |grep curator >/dev/null 2>&1; then
	echo "- stopping curator."
	docker stop so-curator >/dev/null 2>&1
fi

# disable curator
if [ "$CURATOR_ENABLED" = "yes" ]; then
	echo "- disabling curator."
	sed -i 's|CURATOR_ENABLED="yes"|CURATOR_ENABLED="no"|g' $CONF
fi

# stop elastalert if running
if docker ps |grep elastalert >/dev/null 2>&1; then
	echo "- stopping elastalert."
	docker stop so-elastalert >/dev/null 2>&1
fi

# disable elastalert
if [ "$ELASTALERT_ENABLED" = "yes" ]; then
	echo "- disabling elastalert."
	sed -i 's|ELASTALERT_ENABLED="yes"|ELASTALERT_ENABLED="no"|g' $CONF
fi

# stop ossec_agent if running
if pgrep -f /usr/bin/ossec_agent >/dev/null 2>&1; then
	echo "- stopping ossec_agent."
	/usr/sbin/so-ossec-agent-stop >/dev/null 2>&1
fi

# disable ossec_agent
if [ "$OSSEC_AGENT_ENABLED" = "yes" ]; then
	echo "- disabling ossec_agent."
	sed -i 's|OSSEC_AGENT_ENABLED=yes|OSSEC_AGENT_ENABLED=no|g' $CONF
fi

# stop bro if running
if pgrep -f /opt/bro/share/zeekctl/scripts/run-zeek >/dev/null 2>&1; then
	echo "- stopping Zeek sniffing process."
	/usr/sbin/so-bro-stop >/dev/null 2>&1
fi

# disable bro
if [ "$BRO_ENABLED" = "yes" ]; then
	echo "- disabling Zeek sniffing process."
	sed -i 's|BRO_ENABLED=yes|BRO_ENABLED=no|g' $CONF
fi

# reconfigure Elasticsearch and Logstash
if ! grep -q "LOGSTASH_OUTPUT_INGEST" /etc/nsm/securityonion.conf; then
	echo "- updating Elastic config."
	echo 'LOGSTASH_OUTPUT_INGEST="yes"' >> /etc/nsm/securityonion.conf

	# Stop elasticsearch and logstash
	/usr/sbin/so-elasticsearch-stop >/dev/null 2>&1
	/usr/sbin/so-logstash-stop >/dev/null 2>&1

	# so-import-pcap: only decrease ES heap if less than 8GB RAM #1642
	# https://github.com/Security-Onion-Solutions/security-onion/issues/1642
	TOTAL_MEM=`grep MemTotal /proc/meminfo | awk '{print $2}' | sed -r 's/.{3}$//'`
	if [ $TOTAL_MEM -lt 9000 ]; then
		ES_HEAP_SIZE="400m"
		sed -i "s/^-Xms.*/-Xms$ES_HEAP_SIZE/" /etc/elasticsearch/jvm.options
		sed -i "s/^-Xmx.*/-Xmx$ES_HEAP_SIZE/" /etc/elasticsearch/jvm.options
	fi

	# Remove previous elasticsearch log file and start elasticsearch
	CLUSTER_NAME=$(grep "cluster.name" /etc/elasticsearch/elasticsearch.yml | tail -1 | cut -d\" -f2)
	rm -f /var/log/elasticsearch/${CLUSTER_NAME}.log
	/usr/sbin/so-elasticsearch-start >/dev/null 2>&1

	# Reconfigure logstash
	sed -i 's|30s|1s|g' /etc/logstash/*-template.json
	LS_HEAP_SIZE="200m"
	sed -i "s/^-Xms.*/-Xms$LS_HEAP_SIZE/" /etc/logstash/jvm.options
	sed -i "s/^-Xmx.*/-Xmx$LS_HEAP_SIZE/" /etc/logstash/jvm.options

	# Start logstash
	/usr/sbin/so-logstash-start >/dev/null 2>&1

	# Wait until Elasticsearch and Logstash are initialized
	echo -n "- initializing Elasticsearch and Logstash (this may take a few minutes)..."
	until fgrep -qs "adding template [logstash" /var/log/elasticsearch/${CLUSTER_NAME}.log; do
		echo -n "."
		sleep 1s
	done
	echo
fi

touch /etc/nsm/so-import-pcap.conf

echo
echo "Your system has now been configured for so-import-pcap."
echo

# remove lock file
rm $LOCK
