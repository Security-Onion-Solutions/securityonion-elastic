#!/bin/bash
#
# Copyright 2014,2015,2016,2017,2018,2019,2020 Security Onion Solutions, LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. /usr/sbin/so-elastic-common

SOCONF="/etc/nsm/securityonion.conf"
ELASTICONF="$SRC/etc/securityonion-elastic.conf"

FILE=/etc/apt/preferences.d/securityonion-docker
header "Updating $FILE"
cp -av $SRC/$FILE $FILE
echo "Done!"

header "Setting vm.max_map_count to 262144"
sysctl -w vm.max_map_count=262144
cp $SRC/etc/sysctl.d/* /etc/sysctl.d/
echo "Done!"

header "Configuring users"
UID_GID=930
for USER in elasticsearch logstash kibana elastalert curator freqserver domainstats; do
        if grep -q $USER /etc/group; then
                echo "Group $USER already exists!"
        else
                echo "Creating $USER group..."
                groupadd --gid $UID_GID $USER
        fi
        if $(id -u $USER > /dev/null 2>&1); then
                echo "User $USER already exists!"
        else
                echo "Creating $USER user..."
                useradd --uid $UID_GID --gid $UID_GID --home-dir /home/$USER --no-create-home $USER
        fi
        let UID_GID=UID_GID+1
done

header "Configuring ElasticSearch"
for i in /etc/elasticsearch/ /nsm/elasticsearch /var/log/elasticsearch; do
	[ ! -d $i ] && mkdir -p $i
done

for i in /nsm/elasticsearch /var/log/elasticsearch; do
	chown -R elasticsearch:elasticsearch $i
done

cp -av $SRC/etc/elasticsearch/log4j2.properties /etc/elasticsearch/log4j2.properties

ES_YAML="/etc/elasticsearch/elasticsearch.yml"
ES_YAML_BAK="/etc/elasticsearch/elasticsearch.yml.bak"
if [ ! -f "$ES_YAML" ]; then
	# If no config, create it
	cp -av $SRC/$ES_YAML $ES_YAML

	# Set cluster name to hostname in lower case
	HOSTNAME_ORIG=`hostname`
	HOSTNAME_LOWER=${HOSTNAME_ORIG,,}
	sed -i "s/cluster\.name.*/cluster\.name: \"$HOSTNAME_LOWER\"/" $ES_YAML
else
	# If config exists, back it up, write the new config file, and then migrate custom settings
	cp -av $ES_YAML $ES_YAML_BAK
	cp -av $SRC/$ES_YAML $ES_YAML
	
	# cluster.name: "myclustername"
	CLUSTERNAME=$(grep "cluster.name" $ES_YAML_BAK | cut -d\" -f2)
	sed -i "s/cluster\.name.*/cluster\.name: \"$CLUSTERNAME\"/" $ES_YAML

	# transport settings
	# https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-transport.html
	grep "^transport.*:" $ES_YAML_BAK >> $ES_YAML
       
	# cluster.routing.allocation.disk settings
	# https://www.elastic.co/guide/en/elasticsearch/reference/current/disk-allocator.html#disk-allocator
        grep "^cluster.routing.allocation.disk.*:" $ES_YAML_BAK >> $ES_YAML

	# node settings
	# https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-node.html
	grep "^node.*:" $ES_YAML_BAK >> $ES_YAML

	# disovery.zen.ping settings
	# https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-discovery-zen.html
	grep "^discovery.zen.ping.*:" $ES_YAML_BAK >> $ES_YAML

	# xpack.security.enabled
	grep "^xpack.security.enabled:" $ES_YAML_BAK >> $ES_YAML
	
	# securityonion-elastic: migrate script.* settings from elasticsearch.yml.bak to elasticsearch.yml #1676
	# https://github.com/Security-Onion-Solutions/security-onion/issues/1676
	grep "^script.*:" $ES_YAML_BAK >> $ES_YAML
fi

# Get total installed memory
TOTAL_MEM=`grep MemTotal /proc/meminfo | awk '{print $2}' | sed -r 's/.{3}$//'`

# Elasticsearch jvm.options contains heap size and we don't want to overwrite that
if [ ! -f /etc/elasticsearch/jvm.options ]; then
	cp -av $SRC/etc/elasticsearch/jvm.options /etc/elasticsearch/jvm.options

	# Elasticsearch Heap Size
	if [ -f /opt/bro/etc/node.cfg ] &&  grep "^type=standalone$" /opt/bro/etc/node.cfg > /dev/null; then
		# If user chose Evaluation Mode, set ES heap to 600MB
		ES_HEAP_SIZE="600m"
	elif [ $TOTAL_MEM -lt 10000 ]; then
		# If less than 10GB RAM, set heap size to 1GB
        	ES_HEAP_SIZE="1000m"
	elif [ $TOTAL_MEM -ge 100000 ]; then
        	# Set a max of 25GB for heap size
	        # https://www.elastic.co/guide/en/elasticsearch/guide/current/heap-sizing.html
		# https://www.elastic.co/guide/en/elasticsearch/reference/current/heap-size.html
		# "try to stay below the threshold for zero-based compressed oops; the exact cutoff varies but 26 GB is safe on most systems"
        	ES_HEAP_SIZE="25000m"
	else
        	# Set heap size to 25% of available memory
	        ES_HEAP_SIZE=$(($TOTAL_MEM / 4))"m"
	fi
	sed -i "s/^-Xms.*/-Xms$ES_HEAP_SIZE/" /etc/elasticsearch/jvm.options
	sed -i "s/^-Xmx.*/-Xmx$ES_HEAP_SIZE/" /etc/elasticsearch/jvm.options
fi

# Elasticsearch ingest node parsers
mkdir -p /etc/elasticsearch/ingest
cp -av /opt/elastic/src/etc/elasticsearch/ingest/* /etc/elasticsearch/ingest

echo "Done!"

header "Configuring Logstash"
for i in /nsm/logstash /var/log/logstash /etc/logstash/conf.d/ /etc/logstash/conf.d.available/; do
	[ ! -d $i ] && mkdir -p $i
done
for i in /nsm/logstash /var/log/logstash; do
	chown -R logstash:logstash $i
done

# Back up logstash.yml
LS_YAML="/etc/logstash/logstash.yml"
LS_YAML_BAK="/etc/logstash/logstash.yml.bak"
if [ ! -f "$LS_YAML" ]; then
        # If no config, create it
        cp -av $SRC/$LS_YAML $LS_YAML
	# securityonion-elastic: decrease logstash pipeline.workers depending on config #1547
	# https://github.com/Security-Onion-Solutions/security-onion/issues/1547
	# If Evaluation Mode, set pipeline.workers=1
	# Else, set it to half of the total number of CPU cores
	PIPELINE_WORKERS=1
	if ! grep -qs "^type=standalone$" /opt/bro/etc/node.cfg; then	
		CORES=`grep -c ^processor /proc/cpuinfo`
		if [ $CORES -gt 2 ]; then
			PIPELINE_WORKERS=$((CORES / 2))
		fi
	fi
	sed -i "s|.*pipeline.workers: .*$|pipeline.workers: $PIPELINE_WORKERS|g" $LS_YAML
else
        # If config exists, back it up, write the new config file, and then migrate custom settings
        cp -av $LS_YAML $LS_YAML_BAK
        cp -av $SRC/$LS_YAML $LS_YAML

        # Migrate pipeline.workers
        grep "^pipeline.workers" $LS_YAML_BAK >> $LS_YAML

	# Enable Java Execution Engine if necessary
	if ! grep -q "pipeline.java_execution:" $LS_YAML; then
		echo "# Java Execution Engine provides better performance." >> $LS_YAML
		echo "# However, it is not considered stable until version 6.6." >> $LS_YAML
		echo "# If you enable this, make sure to enable the -Xss setting in jvm.options as well." >> $LS_YAML
		echo "pipeline.java_execution: true" >> $LS_YAML
	fi
fi

# Logstash jvm.options
LS_JVM="/etc/logstash/jvm.options"
if [ -f $LS_JVM ]; then
	# If the file already exists, check to see if it has the old 1600m setting
	sed -i 's|-Xms1600m|-Xms2000m|g' $LS_JVM
	sed -i 's|-Xmx1600m|-Xmx2000m|g' $LS_JVM

else
	# If the file doesn't already exist, copy it into place and set heap appropriately
	cp -av $SRC/etc/logstash/jvm.options $LS_JVM
	if [ $TOTAL_MEM -lt 16000 ]; then
        	LS_HEAP_SIZE="2000m"
	else
        	LS_HEAP_SIZE="4000m"
	fi
	sed -i "s/^-Xms.*/-Xms$LS_HEAP_SIZE/" $LS_JVM
	sed -i "s/^-Xmx.*/-Xmx$LS_HEAP_SIZE/" $LS_JVM
fi

# /etc/logstash/conf.d.available/
# This directory stores all available config
CONFDAVAILABLE="/etc/logstash/conf.d.available/"
cp -av $SRC/configfiles/*.conf $CONFDAVAILABLE
cp -av $SRC/configfiles-setup_required/8*_postprocess_dns_*.conf $CONFDAVAILABLE
cp -av $SRC/configfiles-setup_required/85*_postprocess_freq_analysis_*.conf $CONFDAVAILABLE

# /etc/logstash/conf.d/
# This directory stores the currently enabled config and consists of symlinks to files in /etc/logstash/conf.d.available
# Only create symbolic links in /etc/logstash/conf.d/ if this is the first run
# Don't try to create them after that because the user may have intentionally removed parts of the config
README="/etc/logstash/conf.d/README.txt"
if ! [ -f $README ]; then
	for i in `ls $CONFDAVAILABLE/* | sed 's|/etc/logstash/conf.d.available/||g'`; do 
		ln -s ../conf.d.available/$i /etc/logstash/conf.d/$i
	done
cat << EOF >> $README
Please do not modify the files in this directory directly!

The files in this directory are symbolically linked to /etc/logstash/conf.d.available/.

If you want to add to the default logstash config, you can add your own files in /etc/logstash/custom/ and they will get merged into this directory.

If you want to disable parts of the default logstash config, you can remove the symlink for the corresponding file.

EOF
fi

# If upgrading to the new Wazuh/OSSEC integration, we need to add some new files
FILE="/etc/logstash/logstash-ossec-template.json"
if ! [ -f $FILE ]; then
	ln -s ../conf.d.available/6600_winlogbeat_sysmon.conf /etc/logstash/conf.d/6600_winlogbeat_sysmon.conf
	ln -s ../conf.d.available/6700_winlogbeat.conf /etc/logstash/conf.d/6700_winlogbeat.conf
	ln -s ../conf.d.available/9600_output_ossec.conf /etc/logstash/conf.d/9600_output_ossec.conf
fi

# copy the rest of the logstash config
cp -av $SRC/lib/dictionaries /lib/
cp -av $SRC/etc/logstash/beats* /etc/logstash/
cp -av $SRC/etc/logstash/log4j* /etc/logstash/
# /etc/logstash/logstash-template.json contains number_of_shards which may have been customized by user, so let's create a backup copy before overwriting
LS_TMPL="/etc/logstash/logstash-template.json"
LS_TMPL_BAK="/etc/logstash/logstash-template.json.bak"
if [ -f "$LS_TMPL" ]; then
	# If template exists, back it up
	cp -av $LS_TMPL $LS_TMPL_BAK
fi
# write the new logstash-template.json
cp -av $SRC/etc/logstash/logstash-* /etc/logstash/
# now that we've written the new logstash-template.json, update it with number_of_shards value if necessary
if [ -f "$LS_TMPL_BAK" ]; then
	# If backup exists, migrate number_of_shards to new file
	SHARDS=$(grep "number_of_shards" $LS_TMPL_BAK | tail -1)
	sed -i "s|^.*number_of_shards.*$|$SHARDS|g" $LS_TMPL
fi

echo "Done!"

header "Configuring Kibana"
for i in /etc/kibana /var/log/kibana; do
	[ ! -d $i ] && mkdir -p $i
	chown -R kibana:kibana $i
done
# Preserve custom settings in kibana.yml
KIB_YAML="/etc/kibana/kibana.yml"
KIB_YAML_BAK="/etc/kibana/kibana.yml.bak"
if [ ! -f "$KIB_YAML" ]; then
        # If no config, create it
        cp -av $SRC/$KIB_YAML $KIB_YAML
else
        # If config exists, back it up, write the new config file, and then migrate custom settings
        cp -av $KIB_YAML $KIB_YAML_BAK
        cp -av $SRC/$KIB_YAML $KIB_YAML

        # migrate certain settings
        grep "^elasticsearch.requestTimeout:" $KIB_YAML_BAK >> $KIB_YAML
fi
chown kibana:kibana $KIB_YAML
echo "Done!"

header "Configuring Elastalert"
for i in /etc/elastalert/rules /var/log/elastalert; do
	[ ! -d $i ] && mkdir -p $i
	chown -R elastalert:elastalert $i
done
cp -av $SRC/etc/elastalert/rules/* /etc/elastalert/rules/
echo "Done!"

header "Configuring Curator"
for i in /etc/curator/config /etc/curator/action /var/log/curator; do
	[ ! -d $i ] && mkdir -p $i
done
for i in /etc/curator/ /var/log/curator; do
	chown -R curator:curator $i
done
cp -av $SRC/etc/curator/config/* /etc/curator/config/
cp -av $SRC/etc/curator/action/* /etc/curator/action/
echo "Done!"

header "Configuring freq_server"
for i in /var/log/freq_server /var/log/freq_server_dns; do
	[ ! -d $i ] && mkdir -p $i
done
chown -R freqserver:freqserver /var/log/freq_server
echo "Done!"

header "Configuring domain_stats"
mkdir -p /var/log/domain_stats
chown -R domainstats:domainstats /var/log/domain_stats
echo "Done!"

ELSA=NO
[ -f /etc/nsm/securityonion.conf ] && . /etc/nsm/securityonion.conf
if [ $ELSA == "YES" ];then
        . /usr/sbin/so-elastic-configure-log-size
fi

header "Adding Elastic Stack options to $SOCONF"
while read EACH_LINE; do
        OPTION=$(echo $EACH_LINE | cut -d'=' -f1)
        if ! grep -q "$OPTION" $SOCONF; then
                if echo "$EACH_LINE" | grep -q '#'; then
                        echo >> $SOCONF
                fi
		echo "$EACH_LINE" >> $SOCONF
        fi
done < $ELASTICONF

# domain_stats and freq_server are now disabled by default
# If running Setup in Evaluation Mode, enable freq_server and
# check to see if we can safely enable domain_stats
if pgrep sosetup > /dev/null; then
	if [ -f /opt/bro/etc/node.cfg ] &&  grep "^type=standalone$" /opt/bro/etc/node.cfg > /dev/null; then	
	# Enable freq_server
		sed -i 's/^FREQ_SERVER_ENABLED.*/FREQ_SERVER_ENABLED="yes"/' $SOCONF
		# Check for whois connectivity to see if we can enable domain_stats
                echo "Contacting WHOIS server for connectivity..."
                echo
                whois google.com | grep 'Domain Name'
                if [ $? -eq 1 ]; then
                        echo
                        echo "Unable to reach WHOIS server...disabling DomainStats"
                        # Disable domain_stats
			sed -i 's/^DOMAIN_STATS_ENABLED.*/DOMAIN_STATS_ENABLED="no"/' $SOCONF
                else
                        # Enable domain_stats
			sed -i 's/^DOMAIN_STATS_ENABLED.*/DOMAIN_STATS_ENABLED="yes"/' $SOCONF
                fi
	else
		# Disable freq_server and domain_stats
		sed -i 's/^FREQ_SERVER_ENABLED.*/FREQ_SERVER_ENABLED="no"/' $SOCONF
		sed -i 's/^DOMAIN_STATS_ENABLED.*/DOMAIN_STATS_ENABLED="no"/' $SOCONF
		for i in so-domainstats so-freqserver; do
			if docker ps | grep -q $i; then
				docker stop $i
			fi
		done
	fi
fi

echo "Done!"

header "Starting Elastic Stack"
chmod +x /usr/sbin/so-elastic-*
/usr/sbin/so-elastic-start
echo "Done!"

echo "Done!"
