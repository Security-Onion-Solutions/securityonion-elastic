#!/bin/bash
#
# Copyright 2014,2015,2016,2017,2018,2019,2020,2021 Security Onion Solutions, LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. /usr/sbin/so-elastic-common

. /etc/nsm/securityonion.conf

if [ "${KIBANA_ENABLED}" = "no" ]; then

	header "Kibana is disabled, skipping config"

else

	header "Configuring Kibana"
	MAX_WAIT=240

	# Check to see if Elasticsearch is available
	until curl ${ELASTICSEARCH_AUTH} -s -XGET http://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}/_cluster/health > /dev/null ; do
		wait_step=$(( ${wait_step} + 1 ))
		if [ ${wait_step} -gt ${MAX_WAIT} ]; then
			echo "ERROR: Elasticsearch not available for more than ${MAX_WAIT} seconds."
			exit 5
		fi
		sleep 1s;
	done

	# KIBANA_VERSION in /etc/nsm/securityonion.conf may not actually reflect the current Kibana version
	# Two possible cases:
	# 1. In the case of a new installation, KIBANA_VERSION is explicitly set to "UNKNOWN"
	# 2. In the case of a recent Kibana image upgrade, KIBANA_VERSION will be set to the previous version
	# Therefore, we need to get the current version from Elasticsearch
	KIBANA_VERSION=$(curl ${ELASTICSEARCH_AUTH} -s http://$ELASTICSEARCH_HOST:$ELASTICSEARCH_PORT | jq .version.number | sed 's/"//g')

	# Check to see if Kibana is available
	wait_step=0
	until curl ${ELASTICSEARCH_AUTH} localhost:5601/nonexistenturl 2>&1 |grep -q "Not Found" ; do
		wait_step=$(( ${wait_step} + 1 ))
		echo "Waiting on Kibana...Attempt #$wait_step"
		if [ ${wait_step} -gt ${MAX_WAIT} ]; then
			echo "ERROR: Kibana not available for more than ${MAX_WAIT} seconds."
			exit 5
		fi
		sleep 1s;
	done

	# Apply Kibana config
	echo
	echo "Applying Kibana config..."
	curl ${ELASTICSEARCH_AUTH} -s -XPOST http://localhost:5601/api/saved_objects/config/${KIBANA_VERSION}?overwrite=true \
	    -H "Content-Type: application/json" \
	    -H "kbn-xsrf: $KIBANA_VERSION" \
	    -d@$SRC/kibana/config.json
	echo
	
	# Apply cross cluster search seed info for local Elasticsearch instance
	HOST_ORIG=`hostname`
	# set to lower case
	HOSTNAME=${HOST_ORIG,,}
	echo
	echo "Applying cross cluster search config..."
	curl ${ELASTICSEARCH_AUTH} -s -XPUT http://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}/_cluster/settings \
	     -H 'Content-Type: application/json' \
	     -d "{\"persistent\": {\"search\": {\"remote\": {\"$HOSTNAME\": {\"seeds\": [\"127.0.0.1:9300\"]}}}}}"
	echo

	# Apply Kibana template
	echo
	echo "Applying Kibana template..."
	curl ${ELASTICSEARCH_AUTH} -s -XPUT http://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}/_template/kibana \
	     -H 'Content-Type: application/json' \
	     -d'{"index_patterns" : ".kibana", "settings": { "number_of_shards" : 1, "number_of_replicas" : 0 }, "mappings" : { "search": {"properties": {"hits": {"type": "integer"}, "version": {"type": "integer"}}}}}'
	echo

	curl ${ELASTICSEARCH_AUTH} -s -XPUT "${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}/.kibana/_settings" \
	     -H 'Content-Type: application/json' \
	     -d'{"index" : {"number_of_replicas" : 0}}'
	echo

	# Finally, update KIBANA_VERSION in securityonion.conf to reflect the current Kibana version
	echo
	echo "Updating /etc/nsm/securityonion.conf with correct Kibana version ($KIBANA_VERSION)..."
	sed -i "s/KIBANA_VERSION=.*/KIBANA_VERSION=$KIBANA_VERSION/" /etc/nsm/securityonion.conf
	echo

fi
