#!/bin/bash
#
# Copyright 2014,2015,2016,2017,2018,2019,2020,2021 Security Onion Solutions, LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. /usr/sbin/so-elastic-common

# Define a default directory to load pipelines from
ELASTICSEARCH_INGEST_PIPELINES="/etc/elasticsearch/ingest"

# Define a default timeout value
ELASTICSEARCH_TIMEOUT=480

# Allow the user to override those default settings
. /etc/nsm/securityonion.conf

# Wait for ElasticSearch to initialize
echo -n "Waiting for ElasticSearch..."
COUNT=0
ELASTICSEARCH_CONNECTED="no"
while [[ "$COUNT" -le $ELASTICSEARCH_TIMEOUT ]]; do
	curl ${ELASTICSEARCH_AUTH} --output /dev/null --silent --head --fail http://"$ELASTICSEARCH_HOST":"$ELASTICSEARCH_PORT"
	if [ $? -eq 0 ]; then
		ELASTICSEARCH_CONNECTED="yes"
		echo "connected!"
		break
	else
		((COUNT+=1))
		sleep 1
		echo -n "."
	fi
done
if [ "$ELASTICSEARCH_CONNECTED" == "no" ]; then
	echo
	echo -e "Connection attempt timed out.  Unable to connect to ElasticSearch.  \nPlease try: \n  -checking log(s) in /var/log/elasticsearch/\n  -running 'sudo docker ps' \n  -running 'sudo so-elastic-restart'" 
	echo
fi

cd ${ELASTICSEARCH_INGEST_PIPELINES}

echo "Temporarily increasing script.max_compilations.rate..."
curl ${ELASTICSEARCH_AUTH} -XPUT http://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}/_cluster/settings -H 'Content-Type: application/json' -d'{ "transient" : { "script.max_compilations_rate" : "100000/1m" } }'
echo; echo

echo "Loading pipelines..."
for i in *; do echo $i; curl ${ELASTICSEARCH_AUTH} -XPUT http://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}/_ingest/pipeline/$i -H 'Content-Type: application/json' -d@$i; echo; done
echo

echo "Reverting script.max_compilations.rate..."
curl ${ELASTICSEARCH_AUTH} -XPUT http://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}/_cluster/settings -H 'Content-Type: application/json' -d'{ "transient" : { "script.max_compilations_rate" : "75/5m" } }'
echo; echo

cd - >/dev/null
