#!/bin/bash
#
# Copyright 2014,2015,2016,2017,2018,2019,2020 Security Onion Solutions, LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. /usr/sbin/so-elastic-common

. /etc/nsm/securityonion.conf

echo

function load_dashboards {

	# Check to see if Kibana is available, but don't wait more than 240 seconds
	max_wait=240

	# If Kibana is fully initialized, requesting a non-existent URL should result in a "Not Found" error
	until curl ${ELASTICSEARCH_AUTH} localhost:5601/nonexistenturl 2>&1 |grep -q "Not Found" ; do
		wait_step=$(( ${wait_step} + 1 ))
		if [ ${wait_step} -gt ${max_wait} ]; then
			echo "ERROR: Kibana not available for more than ${max_wait} seconds."
			exit 5
		fi
		sleep 1s;
	done

	# Give Kibana a few more seconds just in case
	for i in `seq 1 5`; do echo -n "."; sleep 1s; done

	# Load dashboards, visualizations, index pattern(s), etc.
	for i in /opt/elastic/src/kibana/dashboards/*.json; do
		curl ${ELASTICSEARCH_AUTH} -XPOST localhost:5601/api/kibana/dashboards/import?force=true -H 'kbn-xsrf:true' -H 'Content-type:application/json' -d @$i >> /var/log/nsm/so-elastic-configure-kibana-dashboards.log 2>&1 &
		echo -n "."
	done

	# Give Kibana a few more seconds to fully digest all of those dashboards
	for i in `seq 1 5`; do echo -n "."; sleep 1s; done
}

function dark_disable {
	cp -av /opt/elastic/src/kibana/dashboards /opt/elastic/src/kibana/dashboards.dark >/dev/null
	sed -i 's|\\"darkTheme\\":true|\\"darkTheme\\":false|g' /opt/elastic/src/kibana/dashboards/*.json
	load_dashboards
	rm -rf /opt/elastic/src/kibana/dashboards
	mv /opt/elastic/src/kibana/dashboards.dark /opt/elastic/src/kibana/dashboards
}

if [ "${KIBANA_ENABLED}" = "yes" ]; then
	header "Configuring Kibana dashboards"

	# Enable or disable dark theme based on the setting in securityonion.conf (default to dark theme)
	if ! grep -q "KIBANA_DARK_THEME" /etc/nsm/securityonion.conf; then
		sed -i '/KIBANA_ENABLED="yes"/a KIBANA_DARK_THEME="yes"' /etc/nsm/securityonion.conf
		KIBANA_DARK_THEME="yes"
	fi

	if [ "${KIBANA_DARK_THEME}" = "yes" ]; then
		load_dashboards
	else
		dark_disable
	fi

	echo

fi
